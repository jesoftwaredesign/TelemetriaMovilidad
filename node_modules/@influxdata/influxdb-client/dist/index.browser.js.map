{"version":3,"file":"index.browser.js","sources":["../src/options.ts","../src/errors.ts","../src/util/escape.ts","../src/util/currentTime.ts","../src/query/FluxTableMetaData.ts","../src/query/FluxTableColumn.ts","../src/query/flux.ts","../src/impl/Logger.ts","../src/impl/retryStrategy.ts","../src/impl/RetryBuffer.ts","../src/impl/WriteApiImpl.ts","../src/impl/pureJsChunkCombiner.ts","../src/impl/browser/FetchTransport.ts","../src/impl/completeCommunicationObserver.ts","../src/QueryApi.ts","../src/impl/ChunksToLines.ts","../src/util/LineSplitter.ts","../src/impl/linesToTables.ts","../src/observable/symbol.ts","../src/impl/ObservableQuery.ts","../src/impl/QueryApiImpl.ts","../src/InfluxDB.ts","../src/Point.ts"],"sourcesContent":["import {Transport} from './transport'\nimport WriteApi from './WriteApi'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /** socket timeout */\n  timeout?: number\n  /** extra options for the transport layer */\n  transportOptions?: {[key: string]: any}\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** include random milliseconds when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write  */\n  minRetryDelay: number\n  /** maximum delay when retrying write  */\n  maxRetryDelay: number\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /*\n   * writeFailed is called to inform about write error\n   * @param this the instance of the API that failed\n   * @param error write error\n   * @param lines failed lines\n   * @param attempts a number of failed attempts to write the lines\n   * @return a Promise to force the API to not retry again and use the promise as a result of the flush operation,\n   * void/undefined to continue with default retry mechanism\n   */\n  writeFailed(\n    this: WriteApi,\n    error: Error,\n    lines: Array<string>,\n    attempts: number\n  ): Promise<void> | void\n  /** max number of retries when write fails */\n  maxRetries: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by [[WriteApi]] .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n  /** default tags, unescaped */\n  defaultTags?: Record<string, string>\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = Object.freeze({\n  retryJitter: 200,\n  minRetryDelay: 1000,\n  maxRetryDelay: 15000,\n})\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = Object.freeze({\n  batchSize: 1000,\n  flushInterval: 60000,\n  writeFailed: function() {},\n  maxRetries: 2,\n  maxBufferLines: 32_000,\n  ...DEFAULT_RetryDelayStrategyOptions,\n})\n\n/**\n * Options used by [[InfluxDB]] .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Precission for write operations.\n * See https://v2.docs.influxdata.com/v2.0/api/#operation/PostWrite\n */\nexport const enum WritePrecision {\n  /** nanosecond */\n  ns = 'ns',\n  /* microsecond */\n  us = 'us',\n  /** millisecond */\n  ms = 'ms',\n  /* second */\n  s = 's',\n}\n\n/**\n * Settings that control the way of how a [[Point]] is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  defaultTags?: {[key: string]: string}\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error reason for retrying\n   * @return milliseconds\n   */\n  nextDelay(error?: Error): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @return  0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (body) {\n      this.message = `${statusCode} ${statusMessage} : ${body}`\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error to know whether a possible HTTP call can be retried.\n * @param error Test whether the givver e\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","const reEscape = /[-|\\\\{()[\\]^$+*?.]/g\nconst escapeChar = '\\\\'\n\n/**\n * The Escaper escapes the special characters in the provided list\n * with backslashes. Much of the code here is inspired by that in the\n * sqlstring packet found here: https://github.com/mysqljs/sqlstring\n *\n * Instances of the Escaper are derived from the documentation of escape\n * sequences found here: https://aka.ms/co1m4k\n *\n * sqlstring is made available under the following license:\n *\n *   Copyright (c) 2012 Felix Geisend√∂rfer (felix@debuggable.com) and contributors\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *   THE SOFTWARE.\n *\n */\nclass Escaper {\n  private _re: RegExp\n\n  constructor(\n    private config: {[p: string]: EscaperConfig},\n    private wrap: string = ''\n  ) {\n    const patterns = Object.keys(config)\n      .join('|')\n      .replace(reEscape, '\\\\$&')\n    this._re = new RegExp('[' + patterns + ']', 'g')\n  }\n\n  /**\n   * Escape replaces occurrences of special characters within the target\n   * string with the necessary escape codes.\n   */\n  public escape(val: string): string {\n    this._re.lastIndex = 0\n    let chunkIndex = this._re.lastIndex\n    let escapedVal = ''\n    let match = this._re.exec(val)\n\n    while (match) {\n      const matched = match[0]\n      const toEscape = this.config[matched].escapeChar\n      const toReplace = this.config[matched].replaceChar\n      escapedVal += val.slice(chunkIndex, match.index)\n      escapedVal += toReplace != undefined ? toReplace : toEscape + matched\n      chunkIndex = this._re.lastIndex\n      match = this._re.exec(val)\n    }\n\n    if (chunkIndex === 0) {\n      return this.wrap + val + this.wrap\n    }\n\n    if (chunkIndex < val.length) {\n      return this.wrap + escapedVal + val.slice(chunkIndex) + this.wrap\n    }\n\n    return this.wrap + escapedVal + this.wrap\n  }\n}\n\nclass EscaperConfig {\n  escapeChar?: string\n  replaceChar?: string\n\n  constructor(escapeChar?: string, replaceChar?: string) {\n    this.escapeChar = escapeChar\n    this.replaceChar = replaceChar\n  }\n}\n\nconst escaperConfig = new EscaperConfig(escapeChar)\n\nconst bindEsc = (e: Escaper): ((val: string) => string) => e.escape.bind(e)\n\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: bindEsc(\n    new Escaper({\n      ',': escaperConfig,\n      ' ': escaperConfig,\n      '\\n': new EscaperConfig(undefined, '\\\\n'),\n      '\\r': new EscaperConfig(undefined, '\\\\r'),\n      '\\t': new EscaperConfig(undefined, '\\\\t'),\n    })\n  ),\n\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: bindEsc(\n    new Escaper(\n      {\n        '\"': escaperConfig,\n        '\\\\\\\\': escaperConfig,\n      },\n      '\"'\n    )\n  ),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: bindEsc(\n    new Escaper({\n      ',': escaperConfig,\n      '=': escaperConfig,\n      ' ': escaperConfig,\n      '\\n': new EscaperConfig(undefined, '\\\\n'),\n      '\\r': new EscaperConfig(undefined, '\\\\r'),\n      '\\t': new EscaperConfig(undefined, '\\\\t'),\n    })\n  ),\n}\n","import {WritePrecision} from '../options'\n\ndeclare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.ROLLUP_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = Object.freeze({\n  [String(WritePrecision.s)]: seconds,\n  [String(WritePrecision.ms)]: millis,\n  [String(WritePrecision.us)]: micros,\n  [String(WritePrecision.ns)]: nanos,\n  seconds,\n  millis,\n  micros,\n  nanos,\n})\n\nexport const dateToProtocolTimestamp = {\n  [String(WritePrecision.s)]: (d: Date): string =>\n    `${Math.floor(d.getTime() / 1000)}`,\n  [String(WritePrecision.ms)]: (d: Date): string => `${d.getTime()}`,\n  [String(WritePrecision.us)]: (d: Date): string => `${d.getTime()}000`,\n  [String(WritePrecision.ns)]: (d: Date): string => `${d.getTime()}000000`,\n}\n","import FluxTableColumn, {ColumnType} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\nconst identity = (x: string): any => x\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => x === 'true',\n  unsignedLong: identity,\n  long: identity,\n  double: (x: string): any => +x,\n  string: identity,\n  base64Binary: identity,\n  dateTime: identity,\n  duration: identity,\n}\n/**\n * Represents metadata of a [flux table](http://bit.ly/flux-spec#table).\n */\nexport default class FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  /**\n   * Gets columns by name\n   * @param label table column or [[invalidColumn]]\n   */\n  column(label: string): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    throw new IllegalArgumentError(`Column ${label} not found!`)\n  }\n  /**\n   * Creates an object out of the supplied values with the help of columns .\n   * @param values values for each column\n   */\n  toObject(values: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < values.length; i++) {\n      let val = values[i]\n      const column = this.columns[i]\n      if (val === '' && column.defaultValue) {\n        val = column.defaultValue\n      }\n      acc[column.label] = (typeSerializers[column.dataType] || identity)(val)\n    }\n    return acc\n  }\n}\n","/**\n * Type of query result column, see https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime'\n  | 'duration'\n\nexport interface FluxTableColumnLike {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType?: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group?: boolean\n\n  /**\n   * Default value to be used for rows whose string value is the empty string.\n   */\n  defaultValue?: string\n}\n/**\n * Column metadata of a [flux table](http://bit.ly/flux-spec#table).\n */\nexport default class FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is the empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in the row array\n   * @return index\n   */\n  index: number\n\n  /**\n   * Creates a flux table column from an object supplied.\n   * @param object\n   */\n  static from(object: FluxTableColumnLike): FluxTableColumn {\n    const retVal = new FluxTableColumn()\n    retVal.label = object.label\n    retVal.dataType = object.dataType as ColumnType\n    retVal.group = Boolean(object.group)\n    retVal.defaultValue = object.defaultValue || ''\n    return retVal\n  }\n}\n","export const FLUX_VALUE = Symbol('FLUX_VALUE')\n\n/**\n * A flux parameter can print its (sanitized) flux value.\n */\nexport interface FluxParameterLike {\n  [FLUX_VALUE](): string\n}\n\n/**\n * Represents a parameterized query.\n */\nexport interface ParameterizedQuery {\n  /**\n   * Returns flux query with sanitized parameters.\n   */\n  toString(): string\n}\n\nclass FluxParameter implements FluxParameterLike, ParameterizedQuery {\n  constructor(private fluxValue: string) {}\n  toString(): string {\n    return this.fluxValue\n  }\n  [FLUX_VALUE](): string {\n    return this.fluxValue\n  }\n}\n\n/**\n * Escapes content of the supplied string so it can be wrapped into double qoutes\n * to become a [flux string literal](https://docs.influxdata.com/flux/v0.65/language/lexical-elements/#string-literals).\n * @param value string value\n * @return sanitized string\n */\nfunction sanitizeString(value: any): string {\n  if (value === null || value === undefined) return ''\n  value = value.toString()\n  let retVal: any = undefined\n  let i = 0\n  function prepareRetVal(): void {\n    if (retVal === undefined) {\n      retVal = value.substring(0, i)\n    }\n  }\n  for (; i < value.length; i++) {\n    const c = value.charAt(i)\n    switch (c) {\n      case '\\r':\n        prepareRetVal()\n        retVal += '\\\\r'\n        break\n      case '\\n':\n        prepareRetVal()\n        retVal += '\\\\n'\n        break\n      case '\\t':\n        prepareRetVal()\n        retVal += '\\\\t'\n        break\n      case '\"':\n      case '\\\\':\n        prepareRetVal()\n        retVal = retVal + '\\\\' + c\n        break\n      case '$':\n        // escape ${\n        if (i + 1 < value.length && value.charAt(i + 1) === '{') {\n          prepareRetVal()\n          i++\n          retVal += '\\\\${'\n          break\n        }\n        // append $\n        if (retVal != undefined) {\n          retVal += c\n        }\n        break\n      default:\n        if (retVal != undefined) {\n          retVal += c\n        }\n    }\n  }\n  if (retVal !== undefined) {\n    return retVal\n  }\n  return value\n}\n\n/**\n * Creates a flux string literal.\n */\nexport function fluxString(value: any): FluxParameterLike {\n  return new FluxParameter(`\"${sanitizeString(value)}\"`)\n}\n\n/**\n * Creates a flux integer literal.\n */\nexport function fluxInteger(value: any): FluxParameterLike {\n  const val = String(value)\n  for (const c of val) {\n    if (c < '0' || c > '9') throw new Error(`not a flux integer: ${val}`)\n  }\n  return new FluxParameter(val)\n}\n\nexport function sanitizeFloat(value: any): string {\n  const val = String(value)\n  let dot = false\n  for (const c of val) {\n    if (c === '.') {\n      if (dot) throw new Error(`not a flux float: ${val}`)\n      dot = !dot\n    }\n    if (c !== '.' && (c < '0' || c > '9'))\n      throw new Error(`not a flux float: ${val}`)\n  }\n  return val\n}\n/**\n * Creates a flux float literal.\n */\nexport function fluxFloat(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeFloat(value))\n}\n\nfunction sanitizeDateTime(value: any): string {\n  return `time(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDateTime(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeDateTime(value))\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDuration(value: any): FluxParameterLike {\n  return new FluxParameter(`duration(v: \"${sanitizeString(value)}\")`)\n}\n\nfunction sanitizeRegExp(value: any): string {\n  return `regexp.compile(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux regexp literal.\n */\nexport function fluxRegExp(value: any): FluxParameterLike {\n  // let the server decide if it can be parsed\n  return new FluxParameter(sanitizeRegExp(value))\n}\n\n/**\n * Creates flux boolean literal.\n */\nexport function fluxBool(value: any): FluxParameterLike {\n  if (value === 'true' || value === 'false') {\n    return new FluxParameter(value)\n  }\n  return new FluxParameter((!!value).toString())\n}\n\n/**\n * Assumes that the supplied value is flux expression or literal that does not need sanitizing.\n *\n * @param value any value\n * @returns the supplied value as-is\n */\nexport function fluxExpression(value: any): FluxParameterLike {\n  return new FluxParameter(String(value))\n}\n\n/**\n * Escapes content of the supplied parameter so that it can be safely embedded into flux query.\n * @param value parameter value\n * @return sanitized flux value or an empty string if it cannot be converted\n */\nexport function toFluxValue(value: any): string {\n  if (value === undefined) {\n    return ''\n  } else if (value === null) {\n    return 'null'\n  } else if (typeof value === 'boolean') {\n    return value.toString()\n  } else if (typeof value === 'string') {\n    return `\"${sanitizeString(value)}\"`\n  } else if (typeof value === 'number') {\n    return sanitizeFloat(value)\n  } else if (\n    typeof value === 'object' &&\n    typeof value[FLUX_VALUE] === 'function'\n  ) {\n    return value[FLUX_VALUE]()\n  } else if (value instanceof Date) {\n    return value.toISOString()\n  } else if (value instanceof RegExp) {\n    return sanitizeRegExp(value)\n  }\n  return toFluxValue(value.toString())\n}\n\n/**\n * Flux is a tagged template that sanitizes supplied parameters\n * to avoid injection attacks in flux.\n */\nexport function flux(\n  strings: TemplateStringsArray,\n  ...values: any\n): ParameterizedQuery {\n  if (strings.length == 1 && (!values || values.length === 0)) return strings[0] // the simplest case\n  const parts = new Array<string>(strings.length + values.length)\n  let partIndex = 0\n  for (let i = 0; i < strings.length; i++) {\n    const text = strings[i]\n    parts[partIndex++] = text\n    if (i < values.length) {\n      const val = values[i]\n      let sanitized: string\n      if (\n        text.endsWith('\"') &&\n        i + 1 < strings.length &&\n        strings[i + 1].startsWith('\"')\n      ) {\n        // parameter is wrapped into flux double quotes\n        sanitized = sanitizeString(val)\n      } else {\n        sanitized = toFluxValue(val)\n        if (sanitized === '') {\n          throw new Error(\n            `Unsupported parameter literal '${val}' at index: ${i}, type: ${typeof val}`\n          )\n        }\n      }\n      parts[partIndex++] = sanitized\n    } else if (i < strings.length - 1) {\n      throw new Error('Too few parameters supplied!')\n    }\n  }\n  // return flux expression so that flux can be embedded into another flux as-is\n  return fluxExpression(parts.join(''))\n}\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = Object.freeze({\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n})\nlet provider: Logger = consoleLogger\n\nconst Logger: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger new logger\n * @return previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n\nexport default Logger\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return Math.min(\n        delay + Math.round(Math.random() * this.options.retryJitter),\n        this.options.maxRetryDelay\n      )\n    } else {\n      if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * 2, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy\n * @param options retry options\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import Logger from './Logger'\n\n/* interval between successful retries */\nconst RETRY_INTERVAL = 1\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  next?: RetryItem\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  last?: RetryItem\n  size = 0\n  nextRetryTime = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number\n    ) => Promise<void>\n  ) {}\n\n  addLines(lines: string[], retryCount: number, delay: number): void {\n    if (this.closed) return\n    if (!lines.length) return\n    const retryTime = Date.now() + delay\n    if (retryTime > this.nextRetryTime) this.nextRetryTime = retryTime\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        const newFirst = this.first.next as RetryItem\n        this.size -= this.first.lines.length\n        this.first = newFirst\n      } while (this.first && this.size + lines.length > newSize)\n      Logger.error(\n        `RetryBuffer: ${origSize -\n          this\n            .size} oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines`\n      )\n    }\n    const toAdd = {\n      lines,\n      retryCount,\n    }\n    if (this.last) {\n      this.last.next = toAdd\n      this.last = toAdd\n    } else {\n      this.first = toAdd\n      this.last = toAdd\n      this.scheduleRetry(delay)\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      this.size -= toRetry.lines.length\n      if (!this.first) this.last = undefined\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount)\n          .then(() => {\n            // continue with successfull retry\n            this.scheduleRetry(RETRY_INTERVAL)\n          })\n          .catch(_e => {\n            // already logged\n            this.scheduleRetry(this.nextRetryTime - Date.now())\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, delay)\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","import WriteApi from '../WriteApi'\nimport {\n  WritePrecision,\n  DEFAULT_WriteOptions,\n  PointSettings,\n  WriteOptions,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport Logger from './Logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport Point from '../Point'\nimport {escape} from '../util/escape'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\n\nclass WriteBuffer {\n  length = 0\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    if (this.length === 0) {\n      this.scheduleSend()\n    }\n    this.lines[this.length] = record\n    this.length++\n    if (this.length >= this.maxChunkRecords) {\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi, PointSettings {\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private httpPath: string\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions = {\n    method: 'POST',\n    headers: {\n      'content-type': 'text/plain; charset=utf-8',\n    },\n  }\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecision,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.httpPath = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n    if (this.writeOptions.defaultTags) {\n      this.useDefaultTags(this.writeOptions.defaultTags)\n    }\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries + 1\n              ).catch(_e => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      lines => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries + 1)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch\n    )\n  }\n\n  sendBatch(lines: string[], attempts: number): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    if (!this.closed && lines.length > 0) {\n      return new Promise<void>((resolve, reject) => {\n        this.transport.send(this.httpPath, lines.join('\\n'), this.sendOptions, {\n          error(error: Error): void {\n            // call the writeFailed listener and check if we can retry\n            const onRetry = self.writeOptions.writeFailed.call(\n              self,\n              error,\n              lines,\n              self.writeOptions.maxRetries + 2 - attempts\n            )\n            if (onRetry) {\n              onRetry.then(resolve, reject)\n              return\n            }\n            if (\n              !self.closed &&\n              attempts > 1 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Logger.warn(\n                `Write to influx DB failed (remaining attempts: ${attempts -\n                  1}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                attempts - 1,\n                self.retryStrategy.nextDelay(error)\n              )\n              reject(error)\n              return\n            }\n            Logger.error(`Write to influx DB failed.`, error)\n            reject(error)\n          },\n          complete(): void {\n            self.retryStrategy.success()\n            resolve()\n          },\n        })\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    for (let i = 0; i < points.length; i++) {\n      this.writePoint(points[i])\n    }\n  }\n  async flush(): Promise<void> {\n    await this.writeBuffer.flush()\n    return await this.retryBuffer.flush()\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Logger.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): void {\n    this._clearFlushTimeout()\n    this.closed = true\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = undefined\n    Object.keys(tags).forEach((key: string) => {\n      ;(this.defaultTags || (this.defaultTags = {}))[key] = escape.tag(\n        tags[key]\n      )\n    })\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      // Logger.warn(`unsupported timestamp value: ${value}`)\n      return String(value)\n    }\n  }\n}\n","import {ChunkCombiner} from '../transport'\n\nconst pureJsChunkCombiner: ChunkCombiner = {\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n    const retVal = new Uint8Array(first.length + second.length)\n    retVal.set(first)\n    retVal.set(second, first.length)\n    return retVal\n  },\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n    // see https://en.wikipedia.org/wiki/UTF-8 for details\n    let c1, c2, c3, c4\n    let out = ''\n    let i = start\n    while (i < end) {\n      c1 = chunk[i++]\n      switch (c1 >> 4) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n          // 0xxxxxxx\n          out += String.fromCharCode(c1)\n          break\n        case 12:\n        case 13:\n          // 110x xxxx   10xx xxxx\n          c2 = chunk[i++]\n          out += String.fromCharCode(((c1 & 0x1f) << 6) | (c2 & 0x3f))\n          break\n        case 14:\n          // 1110 xxxx  10xx xxxx  10xx xxxx\n          c2 = chunk[i++]\n          c3 = chunk[i++]\n          out += String.fromCharCode(\n            ((c1 & 0x0f) << 12) | ((c2 & 0x3f) << 6) | (c3 & 0x3f)\n          )\n          break\n        case 15:\n          // 1111 0xxx  10xx xxxx  10xx xxxx 10xx xxxx\n          c2 = chunk[i++]\n          c3 = chunk[i++]\n          c4 = chunk[i++]\n          out += String.fromCodePoint(\n            ((c1 & 0x07) << 18) |\n              ((c2 & 0x3f) << 12) |\n              ((c3 & 0x3f) << 6) |\n              (c4 & 0x3f)\n          )\n          break\n      }\n    }\n    return out\n  },\n\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n    const retVal = new Uint8Array(end - start)\n    retVal.set(chunk.slice(start, end))\n    return retVal\n  },\n}\n\nexport default pureJsChunkCombiner\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  Transport,\n  SendOptions,\n  CommunicationObserver,\n  Headers,\n} from '../../transport'\nimport pureJsChunkCombiner from '../pureJsChunkCombiner'\nimport {ConnectionOptions} from '../../options'\nimport {HttpError} from '../../errors'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport Logger from '../Logger'\nimport {CLIENT_LIB_VERSION} from '../version'\n\n/**\n * Transport layer that use browser fetch.\n */\nexport default class FetchTransport implements Transport {\n  chunkCombiner = pureJsChunkCombiner\n  private defaultHeaders: {[key: string]: string}\n  constructor(private connectionOptions: ConnectionOptions) {\n    this.defaultHeaders = {\n      'content-type': 'application/json; charset=utf-8',\n      'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`,\n    }\n    if (this.connectionOptions.token) {\n      this.defaultHeaders['Authorization'] =\n        'Token ' + this.connectionOptions.token\n    }\n  }\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<Uint8Array>> | undefined\n  ): void {\n    const observer = completeCommunicationObserver(callbacks)\n    if (callbacks && callbacks.useCancellable && !(options as any).signal) {\n      const controller = new AbortController()\n      const signal = controller.signal\n      callbacks.useCancellable({\n        cancel() {\n          controller.abort()\n        },\n        isCancelled() {\n          return signal.aborted\n        },\n      })\n    }\n    this.fetch(path, body, options)\n      .then(async response => {\n        if (callbacks?.responseStarted) {\n          const headers: Headers = {}\n          response.headers.forEach((value: string, key: string) => {\n            const previous = headers[key]\n            if (previous === undefined) {\n              headers[key] = value\n            } else if (Array.isArray(previous)) {\n              previous.push(value)\n            } else {\n              headers[key] = [previous, value]\n            }\n          })\n          observer.responseStarted(headers)\n        }\n        if (response.status >= 300) {\n          return response\n            .text()\n            .then((text: string) => {\n              if (!text) {\n                const headerError = response.headers.get('x-influxdb-error')\n                if (headerError) {\n                  text = headerError\n                }\n              }\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  text,\n                  response.headers.get('retry-after')\n                )\n              )\n            })\n            .catch((e: Error) => {\n              Logger.warn('Unable to receive error body', e)\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  undefined,\n                  response.headers.get('retry-after')\n                )\n              )\n            })\n        } else {\n          if (response.body) {\n            const reader = response.body.getReader()\n            let chunk: ReadableStreamReadResult<Uint8Array>\n            do {\n              chunk = await reader.read()\n              observer.next(chunk.value)\n            } while (!chunk.done)\n          } else if (response.arrayBuffer) {\n            const buffer = await response.arrayBuffer()\n            observer.next(new Uint8Array(buffer))\n          } else {\n            const text = await response.text()\n            observer.next(new TextEncoder().encode(text))\n          }\n        }\n      })\n      .catch(e => observer.error(e))\n      .finally(() => observer.complete())\n  }\n  async request(path: string, body: any, options: SendOptions): Promise<any> {\n    const response = await this.fetch(path, body, options)\n    const {status, headers} = response\n    const responseContentType = headers.get('content-type') || ''\n\n    let data = undefined\n    try {\n      if (responseContentType.includes('json')) {\n        data = await response.json()\n      } else if (responseContentType.includes('text')) {\n        data = await response.text()\n      }\n    } catch (_e) {\n      // ignore\n      Logger.warn('Unable to read error body', _e)\n    }\n    if (status >= 300) {\n      if (!data) {\n        const headerError = headers.get('x-influxdb-error')\n        if (headerError) {\n          data = headerError\n        }\n      }\n      throw new HttpError(\n        status,\n        response.statusText,\n        data,\n        response.headers.get('retry-after')\n      )\n    }\n    return data\n  }\n\n  private fetch(\n    path: string,\n    body: any,\n    options: SendOptions\n  ): Promise<Response> {\n    const {method, headers, ...other} = options\n    return fetch(`${this.connectionOptions.url}${path}`, {\n      method: method,\n      body:\n        method === 'GET' || method === 'HEAD'\n          ? undefined\n          : typeof body === 'string'\n          ? body\n          : JSON.stringify(body),\n      headers: {\n        ...this.defaultHeaders,\n        ...headers,\n      },\n      credentials: 'omit' as 'omit',\n      // allow to specify custom options, such as signal, in SendOptions\n      ...other,\n    })\n  }\n}\n","import {CommunicationObserver, Headers} from '../transport'\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): Omit<Required<CommunicationObserver<any>>, 'useCancellable'> {\n  let state = 0\n  const retVal = {\n    next: (data: any): void => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers): void => {\n      if (callbacks.responseStarted) callbacks.responseStarted(headers)\n    },\n  }\n  return retVal\n}\n","import {Observable} from './observable'\nimport {\n  FluxResultObserver,\n  FluxTableMetaData,\n  ParameterizedQuery,\n} from './query'\nimport {CommunicationObserver} from './transport'\n\nexport function defaultRowMapping(\n  values: string[],\n  tableMeta: FluxTableMetaData\n): Record<string, any> {\n  return tableMeta.toObject(values)\n}\n\nexport interface QueryOptions {\n  /**\n   * Specifies the name of the organization executing the query. Takes either the ID or Name interchangeably.\n   */\n  org: string\n  /**\n   * Type of the query, default is \"flux\"\n   */\n  type?: 'flux'\n  /**\n   * Requests gzip encoded response.\n   */\n  gzip?: boolean\n  /**\n   * Specifies the time that should be reported as \"now\" in the query. RFC3339 value must be returned,\n   * for example `new Date().toISOString()`.\n   */\n  now?: () => string\n}\n\n/** Wraps values and associated metadata of a query result row */\nexport interface Row {\n  values: string[]\n  tableMeta: FluxTableMetaData\n}\n\n/**\n * Query InfluxDB 2.0. Provides methods that notify abouts result lines of the executed query.\n * See https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery\n */\nexport default interface QueryApi {\n  /**\n   * Adds extra options for this query API.\n   * @param options\n   * @return this\n   */\n  with(options: Partial<QueryOptions>): QueryApi\n\n  /**\n   * Creates a cold observable of the lines returned by the given query.\n   *\n   * @param query query\n   */\n  lines(query: string | ParameterizedQuery): Observable<string>\n\n  /**\n   * Creates a cold observable of the rows returned by the given query.\n   *\n   * @param query query\n   */\n  rows(query: string | ParameterizedQuery): Observable<Row>\n\n  /**\n   * Executes the query and receives result lines (including empty and annotation lines)\n   * through the supplied consumer. See [annotated-csv](https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/).\n   *\n   * @param query query\n   * @param consumer data/error consumer\n   */\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void\n\n  /**\n   * Executes the query and receives table metadata and rows through the supplied consumer.\n   *\n   * @param query query\n   * @param consumer data/error consumer\n   */\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void\n\n  /**\n   * CollectRows executes the query and collects all the results in the returned Promise.\n   * This method is suitable to collect simple results. Use with caution,\n   * a possibly huge stream of results is copied to memory.\n   *\n   * @param query query\n   * @param rowMapper maps the supplied row to an item that is then collected,\n   *  undefined return values are not collected. If no rowMapper is supplied,\n   *  `row => row.tableMeta.toObject(row.values)` is used.\n   */\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper?: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>>\n\n  /**\n   * CollectLines executes the query and collects all result lines in the returned Promise.\n   * This method is suitable to collect simple results. Use with caution,\n   * a possibly huge stream of lines is copied to memory.\n   *\n   * @param query query\n   */\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>>\n}\n","import {CommunicationObserver, ChunkCombiner} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\n/**\n * Converts lines to table calls\n */\nexport default class ChunksToLines implements CommunicationObserver<any> {\n  previous?: Uint8Array\n  finished = false\n\n  constructor(\n    private target: CommunicationObserver<string>,\n    private chunks: ChunkCombiner\n  ) {}\n\n  next(chunk: Uint8Array): void {\n    if (this.finished) return\n    try {\n      this.bufferReceived(chunk)\n    } catch (e) {\n      this.error(e)\n    }\n  }\n  error(error: Error): void {\n    if (!this.finished) {\n      this.finished = true\n      this.target.error(error)\n    }\n  }\n  complete(): void {\n    if (!this.finished) {\n      if (this.previous) {\n        this.target.next(\n          this.chunks.toUtf8String(this.previous, 0, this.previous.length)\n        )\n      }\n      this.finished = true\n      this.target.complete()\n    }\n  }\n  useCancellable(cancellable: Cancellable): void {\n    this.target.useCancellable && this.target.useCancellable(cancellable)\n  }\n\n  private bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (this.previous) {\n      chunk = this.chunks.concat(this.previous, chunk)\n      index = (this.previous as Buffer).length\n    } else {\n      index = 0\n    }\n    let quoted = false\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          this.target.next(this.chunks.toUtf8String(chunk, start, end))\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < index) {\n      this.previous = this.chunks.copy(chunk, start, index)\n    } else {\n      this.previous = undefined\n    }\n  }\n}\n","const SEPARATOR = ','\nconst WRAPPER = '\"'\n\n/**\n * Optimized tokenizer of a single CSV line.\n */\nexport default class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   * @param line\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line line\n   * @return\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === SEPARATOR) {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === WRAPPER) {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","import {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport LineSplitter from '../util/LineSplitter'\nimport FluxTableColumn, {ColumnType} from '../query/FluxTableColumn'\nimport FluxTableMetaData from '../query/FluxTableMetaData'\n\nexport function toLineObserver(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  return {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = new FluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = new FluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n    },\n    complete(): void {\n      consumer.complete()\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (consumer.useCancellable) consumer.useCancellable(cancellable)\n    },\n  }\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"@@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\nexport type QueryExecutor = (consumer: CommunicationObserver<string>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<string>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<string>, executor: QueryExecutor) {\n    try {\n      executor({\n        next: value => {\n          observer.next(value)\n        },\n        error: e => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: c => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: QueryExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n}\n","import {Observable} from '../observable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport QueryApi, {QueryOptions, Row, defaultRowMapping} from '../QueryApi'\nimport {CommunicationObserver, Transport} from '../transport'\nimport ChunksToLines from './ChunksToLines'\nimport {toLineObserver} from './linesToTables'\nimport ObservableQuery, {QueryExecutor} from './ObservableQuery'\nimport {ParameterizedQuery} from '../query/flux'\nimport {FluxTableMetaData} from '../query'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\nconst identity = <T>(value: T): T => value\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(private transport: Transport, org: string) {\n    this.options = {org}\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    this.options = {...this.options, ...options}\n    return this\n  }\n\n  lines(query: string | ParameterizedQuery): Observable<string> {\n    return new ObservableQuery(this.createExecutor(query), identity)\n  }\n\n  rows(query: string | ParameterizedQuery): Observable<Row> {\n    return new ObservableQuery(this.createExecutor(query), observer => {\n      return toLineObserver({\n        next(values, tableMeta) {\n          observer.next({values, tableMeta})\n        },\n        error(e) {\n          observer.error(e)\n        },\n        complete() {\n          observer.complete()\n        },\n      })\n    })\n  }\n\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void {\n    this.createExecutor(query)(consumer)\n  }\n\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void {\n    this.createExecutor(query)(toLineObserver(consumer))\n  }\n\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined = defaultRowMapping as (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    const retVal: Array<T> = []\n    return new Promise((resolve, reject) => {\n      this.queryRows(query, {\n        next(values: string[], tableMeta: FluxTableMetaData): void {\n          const toAdd = rowMapper.call(this, values, tableMeta)\n          if (toAdd !== undefined) {\n            retVal.push(toAdd)\n          }\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>> {\n    const retVal: Array<string> = []\n    return new Promise((resolve, reject) => {\n      this.queryLines(query, {\n        next(line: string): void {\n          retVal.push(line)\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  private createExecutor(query: string | ParameterizedQuery): QueryExecutor {\n    const {org, type, gzip} = this.options\n\n    return (consumer): void => {\n      this.transport.send(\n        `/api/v2/query?org=${encodeURIComponent(org)}`,\n        JSON.stringify(\n          this.decorateRequest({\n            query: query.toString(),\n            dialect: DEFAULT_dialect,\n            type,\n          })\n        ),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n          },\n        },\n        new ChunksToLines(consumer, this.transport.chunkCombiner)\n      )\n    }\n  }\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery requires type\n    request.type = this.options.type || 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import WriteApi from './WriteApi'\nimport {ClientOptions, WritePrecision, WriteOptions} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/node/NodeHttpTransport'\nimport QueryApi from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\n\n/**\n * InfluxDB 2.0 client that uses HTTP API described in https://v2.docs.influxdata.com/v2.0/reference/api/ .\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport || new TransportImpl(this._options)\n  }\n\n  /**\n   * Creates [[WriteApi]] for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @param org Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket The destination bucket for writes.\n   * @param precision Timestamp precision for line items.\n   * @param writeOptions Custom write options.\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecision = WritePrecision.ns,\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions || this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates [[QueryAPI]] for the supplied organization .\n   *\n   * @param org organization\n   * @return query api instance\n   */\n  getQueryApi(org: string): QueryApi {\n    return new QueryApiImpl(this.transport, org)\n  }\n}\n","import {escape} from './util/escape'\nimport {PointSettings} from './options'\n/**\n * Point defines the values that will be written to the database.\n * See [Go Implementation](http://bit.ly/influxdata-point)\n */\nexport default class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  private fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName the measurement name\n   * @return new instance of {@link Point}\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name measurement name\n   * @return new instance of {@link Point}\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag.\n   *\n   * @param name  tag name\n   * @param value tag value\n   * @return this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field field name\n   * @param value field value\n   * @return this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name field name\n   * @param value field value\n   * @return this\n   */\n  public intField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseInt(String(value))))) {\n        throw new Error(\n          `Expected integer value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = `${Math.floor(value as number)}i`\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name field name\n   * @param value field value\n   * @return this\n   */\n  public floatField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseFloat(value)))) {\n        throw new Error(\n          `Expected float value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = String(value)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name field name\n   * @param value field value\n   * @return this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point time. A string or number value can be used\n   * to carry an int64 value of a precision that depends\n   * on WriteApi, nanoseconds by default. An undefined value\n   * generates a local timestamp using the client's clock.\n   * An empty string can be used to let the server assign\n   * the timestamp.\n   *\n   * @param value point time\n   * @return this\n   */\n  public timestamp(value: Date | number | string | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  public toLineProtocol(settings?: PointSettings): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n"],"names":["DEFAULT_RetryDelayStrategyOptions","Object","freeze","retryJitter","minRetryDelay","maxRetryDelay","DEFAULT_WriteOptions","batchSize","flushInterval","writeFailed","maxRetries","maxBufferLines","retriableStatusCodes","isStatusCodeRetriable","statusCode","includes","IllegalArgumentError","Error","[object Object]","message","super","setPrototypeOf","this","prototype","HttpError","statusMessage","body","retryAfter","setRetryAfter","test","_retryAfter","parseInt","RETRY_CODES","getRetryDelay","error","retVal","Math","round","random","RequestTimedOutError","AbortError","name","reEscape","Escaper","config","wrap","patterns","keys","join","replace","_re","RegExp","val","lastIndex","chunkIndex","escapedVal","match","exec","matched","toEscape","escapeChar","toReplace","replaceChar","slice","index","undefined","length","EscaperConfig","escaperConfig","bindEsc","e","escape","bind","measurement",","," ","\n","\r","\t","quoted","\"","\\\\","tag","=","lastMillis","Date","now","stepsInMillis","nanos","millis","String","substr","micros","seconds","floor","currentTime","dateToProtocolTimestamp","d","getTime","identity","x","typeSerializers","boolean","unsignedLong","long","double","string","base64Binary","dateTime","duration","FluxTableMetaData","columns","forEach","col","i","label","values","acc","column","defaultValue","dataType","FluxTableColumn","object","group","Boolean","FLUX_VALUE","Symbol","FluxParameter","fluxValue","sanitizeString","value","toString","prepareRetVal","substring","c","charAt","sanitizeFloat","dot","sanitizeRegExp","fluxExpression","toFluxValue","toISOString","provider","console","warn","Logger","RetryStrategyImpl","options","success","delay","min","currentDelay","max","RetryBuffer","maxLines","retryLines","lines","retryCount","closed","retryTime","nextRetryTime","first","size","origSize","newSize","newFirst","next","toAdd","last","scheduleRetry","toRetry","_timeoutHandle","setTimeout","removeLines","then","catch","_e","clearTimeout","WriteBuffer","maxChunkRecords","flushFn","scheduleSend","Array","record","flush","reset","Promise","resolve","WriteApiImpl","transport","org","bucket","precision","writeOptions","method","headers","content-type","httpPath","encodeURIComponent","defaultTags","useDefaultTags","writeBuffer","_clearFlushTimeout","sendBatch","retryStrategy","retryBuffer","attempts","self","reject","send","sendOptions","onRetry","call","addLines","nextDelay","add","records","point","line","toLineProtocol","points","writePoint","finally","remaining","close","tags","key","pureJsChunkCombiner","second","Uint8Array","set","chunk","start","end","c1","c2","c3","c4","out","fromCharCode","fromCodePoint","FetchTransport","connectionOptions","defaultHeaders","User-Agent","token","path","callbacks","observer","state","data","complete","responseStarted","completeCommunicationObserver","useCancellable","signal","controller","AbortController","abort","isCancelled","aborted","fetch","response","previous","isArray","push","status","text","headerError","get","statusText","reader","getReader","read","done","arrayBuffer","buffer","TextEncoder","encode","responseContentType","json","other","url","JSON","stringify","credentials","defaultRowMapping","tableMeta","toObject","ChunksToLines","target","chunks","finished","bufferReceived","toUtf8String","cancellable","concat","copy","LineSplitter","reuse","_reuse","reusedValues","lastSplitLength","quoteCount","startIndex","count","getValue","toLineObserver","consumer","splitter","withReuse","lastMeta","expectMeta","firstColumnIndex","splitLine","startsWith","symbolObservable","observable","QuerySubscription","executor","isClosed","cancel","noop","ObservableQuery","decorator","observerOrNext","completeObserver","DEFAULT_dialect","header","delimiter","quoteChar","commentPrefix","annotations","QueryApiImpl","query","createExecutor","rowMapper","queryRows","queryLines","type","gzip","decorateRequest","dialect","accept-encoding","chunkCombiner","request","timeout","_options","endsWith","TransportImpl","measurementName","fields","isNaN","parseFloat","time","settings","fieldsLine","sort","tagsLine","convertTime","canRetry","code","strings","parts","partIndex","sanitized","sanitizeDateTime","use"],"mappings":"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"}